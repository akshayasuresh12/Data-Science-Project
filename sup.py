{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Diabetes Prediction using Machine Learning<a href=\"#Diabetes-Prediction-using-Machine-Learning\" class=\"anchor-link\">¶</a>\n",
    "\n",
    "Problem Statement: To build a system that can predict if a person has\n",
    "diabetes or not with the help of Machine Learning. The project is done\n",
    "in Python. Support vector model is used for prediction. The system is\n",
    "built in such a way that if we provide the input data like the\n",
    "glucose,blood pressure level,BMI,age,etc, it predicts if the person is\n",
    "diabetic or not diabetic.\n",
    "\n",
    "# Data Collection and Analysis<a href=\"#Data-Collection-and-Analysis\" class=\"anchor-link\">¶</a>\n",
    "\n",
    "In \\[1\\]:\n",
    "\n",
    "    from warnings import filterwarnings\n",
    "    filterwarnings(\"ignore\")\n",
    "    import pandas as pd\n",
    "    import numpy as np\n",
    "\n",
    "In \\[2\\]:\n",
    "\n",
    "    #loading the diabetes dataset into pandas dataframe\n",
    "    A = pd.read_csv(\"C:/Users/Dell/Downloads/diabetes.csv\")\n",
    "\n",
    "In \\[3\\]:\n",
    "\n",
    "    A.head()\n",
    "\n",
    "Out\\[3\\]:\n",
    "\n",
    "|     | Pregnancies | Glucose | BloodPressure | SkinThickness | Insulin | BMI  | DiabetesPedigreeFunction | Age | Outcome |\n",
    "|-----|-------------|---------|---------------|---------------|---------|------|--------------------------|-----|---------|\n",
    "| 0   | 6           | 148     | 72            | 35            | 0       | 33.6 | 0.627                    | 50  | 1       |\n",
    "| 1   | 1           | 85      | 66            | 29            | 0       | 26.6 | 0.351                    | 31  | 0       |\n",
    "| 2   | 8           | 183     | 64            | 0             | 0       | 23.3 | 0.672                    | 32  | 1       |\n",
    "| 3   | 1           | 89      | 66            | 23            | 94      | 28.1 | 0.167                    | 21  | 0       |\n",
    "| 4   | 0           | 137     | 40            | 35            | 168     | 43.1 | 2.288                    | 33  | 1       |\n",
    "\n",
    "In \\[4\\]:\n",
    "\n",
    "    #number of rows and columns\n",
    "    A.shape\n",
    "\n",
    "Out\\[4\\]:\n",
    "\n",
    "    (768, 9)\n",
    "\n",
    "In \\[5\\]:\n",
    "\n",
    "    #to understand statistical features of the data\n",
    "    A.describe()\n",
    "\n",
    "Out\\[5\\]:\n",
    "\n",
    "|       | Pregnancies | Glucose    | BloodPressure | SkinThickness | Insulin    | BMI        | DiabetesPedigreeFunction | Age        | Outcome    |\n",
    "|-------|-------------|------------|---------------|---------------|------------|------------|--------------------------|------------|------------|\n",
    "| count | 768.000000  | 768.000000 | 768.000000    | 768.000000    | 768.000000 | 768.000000 | 768.000000               | 768.000000 | 768.000000 |\n",
    "| mean  | 3.845052    | 120.894531 | 69.105469     | 20.536458     | 79.799479  | 31.992578  | 0.471876                 | 33.240885  | 0.348958   |\n",
    "| std   | 3.369578    | 31.972618  | 19.355807     | 15.952218     | 115.244002 | 7.884160   | 0.331329                 | 11.760232  | 0.476951   |\n",
    "| min   | 0.000000    | 0.000000   | 0.000000      | 0.000000      | 0.000000   | 0.000000   | 0.078000                 | 21.000000  | 0.000000   |\n",
    "| 25%   | 1.000000    | 99.000000  | 62.000000     | 0.000000      | 0.000000   | 27.300000  | 0.243750                 | 24.000000  | 0.000000   |\n",
    "| 50%   | 3.000000    | 117.000000 | 72.000000     | 23.000000     | 30.500000  | 32.000000  | 0.372500                 | 29.000000  | 0.000000   |\n",
    "| 75%   | 6.000000    | 140.250000 | 80.000000     | 32.000000     | 127.250000 | 36.600000  | 0.626250                 | 41.000000  | 1.000000   |\n",
    "| max   | 17.000000   | 199.000000 | 122.000000    | 99.000000     | 846.000000 | 67.100000  | 2.420000                 | 81.000000  | 1.000000   |\n",
    "\n",
    "In \\[6\\]:\n",
    "\n",
    "    A['Outcome'].value_counts()\n",
    "\n",
    "Out\\[6\\]:\n",
    "\n",
    "    0    500\n",
    "    1    268\n",
    "    Name: Outcome, dtype: int64\n",
    "\n",
    "0 -- Non-Diabetic\n",
    "\n",
    "1 -- Diabetic\n",
    "\n",
    "Analysis - The proportion of Non-diabetic cases are more than the\n",
    "diabetic cases in this dataset\n",
    "\n",
    "In \\[8\\]:\n",
    "\n",
    "    A.groupby('Outcome').mean()\n",
    "\n",
    "Out\\[8\\]:\n",
    "\n",
    "|         | Pregnancies | Glucose    | BloodPressure | SkinThickness | Insulin    | BMI       | DiabetesPedigreeFunction | Age       |\n",
    "|---------|-------------|------------|---------------|---------------|------------|-----------|--------------------------|-----------|\n",
    "| Outcome |             |            |               |               |            |           |                          |           |\n",
    "| 0       | 3.298000    | 109.980000 | 68.184000     | 19.664000     | 68.792000  | 30.304200 | 0.429734                 | 31.190000 |\n",
    "| 1       | 4.865672    | 141.257463 | 70.824627     | 22.164179     | 100.335821 | 35.142537 | 0.550500                 | 37.067164 |\n",
    "\n",
    "# Define X and Y<a href=\"#Define-X-and-Y\" class=\"anchor-link\">¶</a>\n",
    "\n",
    "In \\[9\\]:\n",
    "\n",
    "    #separating data and labels\n",
    "    X = A.drop(labels=[\"Outcome\"],axis=1)\n",
    "    Y = A[[\"Outcome\"]]\n",
    "\n",
    "In \\[10\\]:\n",
    "\n",
    "    print(X)\n",
    "\n",
    "         Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
    "    0              6      148             72             35        0  33.6   \n",
    "    1              1       85             66             29        0  26.6   \n",
    "    2              8      183             64              0        0  23.3   \n",
    "    3              1       89             66             23       94  28.1   \n",
    "    4              0      137             40             35      168  43.1   \n",
    "    ..           ...      ...            ...            ...      ...   ...   \n",
    "    763           10      101             76             48      180  32.9   \n",
    "    764            2      122             70             27        0  36.8   \n",
    "    765            5      121             72             23      112  26.2   \n",
    "    766            1      126             60              0        0  30.1   \n",
    "    767            1       93             70             31        0  30.4   \n",
    "\n",
    "         DiabetesPedigreeFunction  Age  \n",
    "    0                       0.627   50  \n",
    "    1                       0.351   31  \n",
    "    2                       0.672   32  \n",
    "    3                       0.167   21  \n",
    "    4                       2.288   33  \n",
    "    ..                        ...  ...  \n",
    "    763                     0.171   63  \n",
    "    764                     0.340   27  \n",
    "    765                     0.245   30  \n",
    "    766                     0.349   47  \n",
    "    767                     0.315   23  \n",
    "\n",
    "    [768 rows x 8 columns]\n",
    "\n",
    "In \\[11\\]:\n",
    "\n",
    "    print(Y)\n",
    "\n",
    "         Outcome\n",
    "    0          1\n",
    "    1          0\n",
    "    2          1\n",
    "    3          0\n",
    "    4          1\n",
    "    ..       ...\n",
    "    763        0\n",
    "    764        0\n",
    "    765        0\n",
    "    766        1\n",
    "    767        0\n",
    "\n",
    "    [768 rows x 1 columns]\n",
    "\n",
    "# Data Standardization<a href=\"#Data-Standardization\" class=\"anchor-link\">¶</a>\n",
    "\n",
    "In \\[12\\]:\n",
    "\n",
    "    from sklearn.preprocessing import StandardScaler\n",
    "    ss = StandardScaler()\n",
    "    ss.fit(X)\n",
    "    standardized_data = ss.transform(X)\n",
    "\n",
    "In \\[13\\]:\n",
    "\n",
    "    print(standardized_data)\n",
    "\n",
    "    [[ 0.63994726  0.84832379  0.14964075 ...  0.20401277  0.46849198\n",
    "       1.4259954 ]\n",
    "     [-0.84488505 -1.12339636 -0.16054575 ... -0.68442195 -0.36506078\n",
    "      -0.19067191]\n",
    "     [ 1.23388019  1.94372388 -0.26394125 ... -1.10325546  0.60439732\n",
    "      -0.10558415]\n",
    "     ...\n",
    "     [ 0.3429808   0.00330087  0.14964075 ... -0.73518964 -0.68519336\n",
    "      -0.27575966]\n",
    "     [-0.84488505  0.1597866  -0.47073225 ... -0.24020459 -0.37110101\n",
    "       1.17073215]\n",
    "     [-0.84488505 -0.8730192   0.04624525 ... -0.20212881 -0.47378505\n",
    "      -0.87137393]]\n",
    "\n",
    "In \\[15\\]:\n",
    "\n",
    "    X = standardized_data #considering standardized data for further analysis\n",
    "    Y = A[[\"Outcome\"]]\n",
    "\n",
    "In \\[16\\]:\n",
    "\n",
    "    print(X)\n",
    "    print(Y)\n",
    "\n",
    "    [[ 0.63994726  0.84832379  0.14964075 ...  0.20401277  0.46849198\n",
    "       1.4259954 ]\n",
    "     [-0.84488505 -1.12339636 -0.16054575 ... -0.68442195 -0.36506078\n",
    "      -0.19067191]\n",
    "     [ 1.23388019  1.94372388 -0.26394125 ... -1.10325546  0.60439732\n",
    "      -0.10558415]\n",
    "     ...\n",
    "     [ 0.3429808   0.00330087  0.14964075 ... -0.73518964 -0.68519336\n",
    "      -0.27575966]\n",
    "     [-0.84488505  0.1597866  -0.47073225 ... -0.24020459 -0.37110101\n",
    "       1.17073215]\n",
    "     [-0.84488505 -0.8730192   0.04624525 ... -0.20212881 -0.47378505\n",
    "      -0.87137393]]\n",
    "         Outcome\n",
    "    0          1\n",
    "    1          0\n",
    "    2          1\n",
    "    3          0\n",
    "    4          1\n",
    "    ..       ...\n",
    "    763        0\n",
    "    764        0\n",
    "    765        0\n",
    "    766        1\n",
    "    767        0\n",
    "\n",
    "    [768 rows x 1 columns]\n",
    "\n",
    "# Train Test Split<a href=\"#Train-Test-Split\" class=\"anchor-link\">¶</a>\n",
    "\n",
    "In \\[17\\]:\n",
    "\n",
    "    from sklearn.model_selection import train_test_split\n",
    "    xtrain,xtest,ytrain,ytest = train_test_split(X,Y,test_size = 0.2, stratify = Y,random_state=31)\n",
    "\n",
    "In \\[18\\]:\n",
    "\n",
    "    print(X.shape,xtrain.shape,xtest.shape)\n",
    "\n",
    "    (768, 8) (614, 8) (154, 8)\n",
    "\n",
    "# Training the model<a href=\"#Training-the-model\" class=\"anchor-link\">¶</a>\n",
    "\n",
    "# Support Vector Machine<a href=\"#Support-Vector-Machine\" class=\"anchor-link\">¶</a>\n",
    "\n",
    "In \\[19\\]:\n",
    "\n",
    "    from sklearn import svm\n",
    "    classifier = svm.SVC(kernel = 'linear')\n",
    "\n",
    "In \\[20\\]:\n",
    "\n",
    "    #training the support vector machine classifier\n",
    "    model = classifier.fit(xtrain,ytrain)\n",
    "\n",
    "# Model Evaluation<a href=\"#Model-Evaluation\" class=\"anchor-link\">¶</a>\n",
    "\n",
    "# Accuracy Score<a href=\"#Accuracy-Score\" class=\"anchor-link\">¶</a>\n",
    "\n",
    "In \\[22\\]:\n",
    "\n",
    "    #accuracy score on the training data\n",
    "    from sklearn.metrics import accuracy_score\n",
    "    xtrain_pred = classifier.predict(xtrain)\n",
    "    training_data_accuracy = accuracy_score(xtrain_pred,ytrain)\n",
    "\n",
    "In \\[23\\]:\n",
    "\n",
    "    print(\"Accuracy score of the training data: \",training_data_accuracy)\n",
    "\n",
    "    Accuracy score of the training data:  0.7768729641693811\n",
    "\n",
    "In \\[24\\]:\n",
    "\n",
    "    #accuracy score on the test data\n",
    "    xtest_pred = classifier.predict(xtest)\n",
    "    test_data_accuracy = accuracy_score(xtest_pred,ytest)\n",
    "\n",
    "In \\[25\\]:\n",
    "\n",
    "    print(\"Accuracy score of the test data: \",test_data_accuracy)\n",
    "\n",
    "    Accuracy score of the test data:  0.7727272727272727\n",
    "\n",
    "# Making a Predictive System<a href=\"#Making-a-Predictive-System\" class=\"anchor-link\">¶</a>\n",
    "\n",
    "By making a Predictive System, we can predict if the person is diabetic\n",
    "or non-diabetic by giving the input data (medical information) to the\n",
    "sysytem.\n",
    "\n",
    "In \\[26\\]:\n",
    "\n",
    "    input_data = (4,110,92,0,0,37.6,0.191,30)\n",
    "\n",
    "    #changing the input_data to numpy array\n",
    "    input_data_as_numpy_array = np.asarray(input_data)\n",
    "\n",
    "    #reshape the array as we are predicting for one instance\n",
    "    input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\n",
    "\n",
    "    #standardize the input_data\n",
    "    std_data = ss.transform(input_data_reshaped)\n",
    "    print(std_data)\n",
    "\n",
    "    prediction = classifier.predict(std_data)\n",
    "    print(prediction)\n",
    "\n",
    "\n",
    "    if(prediction[0] == 0):\n",
    "        print(\"The person is not diabetic\")\n",
    "    else:\n",
    "        print(\"The person is diabetic\")\n",
    "\n",
    "    [[ 0.04601433 -0.34096773  1.18359575 -1.28821221 -0.69289057  0.71168975\n",
    "      -0.84827977 -0.27575966]]\n",
    "    [0]\n",
    "    The person is not diabetic\n",
    "\n",
    "# Trying for diabetic case<a href=\"#Trying-for-diabetic-case\" class=\"anchor-link\">¶</a>\n",
    "\n",
    "In \\[28\\]:\n",
    "\n",
    "    input_data = (13,129,0,30,0,39.9,0.569,44)\n",
    "\n",
    "    #changing the input_data to numpy array\n",
    "    input_data_as_numpy_array = np.asarray(input_data)\n",
    "\n",
    "    #reshape the array as we are predicting for one instance\n",
    "    input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)\n",
    "\n",
    "    #standardize the input_data\n",
    "    std_data = ss.transform(input_data_reshaped)\n",
    "    print(std_data)\n",
    "\n",
    "    prediction = classifier.predict(std_data)\n",
    "    print(prediction)\n",
    "\n",
    "\n",
    "    if(prediction[0] == 0):\n",
    "        print(\"The person is not diabetic\")\n",
    "    else:\n",
    "        print(\"The person is diabetic\")\n",
    "\n",
    "    [[ 2.7187125   0.25367803 -3.57259724  0.59362962 -0.69289057  1.00360402\n",
    "       0.29332509  0.91546889]]\n",
    "    [1]\n",
    "    The person is diabetic\n",
    "\n",
    "In \\[ \\]:"
   ]
  }
 ],
 "nbformat": 4,
 "nbformat_minor": 5,
 "metadata": {}
}
